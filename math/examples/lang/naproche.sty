\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{naproche}[2025-09-05 v1.0.0 Basic LaTeX package for Naproche formalization]

% Packages required by this package:
\RequirePackage{amsfonts}         % For the Naproche logo
\RequirePackage{xspace}           % For the Naproche logo
\RequirePackage{xcolor}           % For the "forthel" environment
\RequirePackage{mdframed}         % For the "forthel" environment
\RequirePackage{linegoal}         % For the "\classtext" command

% Additiona packages required for certain ForTheL keywords:
\RequirePackage{amsmath}  % For "\text", "\implies", "\iff", etc.
\RequirePackage{url}      % For "\path"


% Preliminary Setup
% =================

% Declare a Boolean variable "naproche@forthel" which is "true" iff we are
% currently in a "forthel" environment.
\newbool{naproche@forthel}

% Declare a Boolean variable "naproche@puzzle". When set to "true", the puzzle
% typesetting is used instead of the standard Naproche typesetting.
\newbool{naproche@puzzle}

% Declare a new counter "naproche@tlscounter" which is increased at every
% (numbered) top-level section environment (see below) and printed in the head
% of that top-level section.
\newcounter{naproche@tlscounter}


% Package Options
% ===============

% Declare a package option "puzzle" which, when given, triggers the puzzle
% typesetting
\DeclareOption{puzzle}{
  \setbool{naproche@puzzle}{true}
}

% Declare a package option "numberswithinsection" which, when given, resets the
% top-level section counter at every new section.
\DeclareOption{numberswithinsection}{
  \counterwithin{naproche@tlscounter}{section}
}

% Declare a package option "numberswithinsection" which, when given, resets the
% top-level section counter at every new subection.
\DeclareOption{numberswithinsubsection}{
  \counterwithin{naproche@tlscounter}{subsection}
}

% Throw a warning when an unknown option is passed to this package.
\DeclareOption*{
  \PackageWarning{naproche}{Unknown option `\CurrentOption'}
}

% Process the package options.
\ProcessOptions\relax


% Commands Required by ForTheL
% ============================

% Define a command "\dom" (without any arguments) for Naproche's hard-coded
% "\dom" operator.
\NewDocumentCommand{\dom}{}{\textrm{dom}}

% Define a command "\fun" (without any arguments) for Naproche's "\fun" keyword.
\NewDocumentCommand{\fun}{}{\mathrm{\lambda}}


% Naproche Logo
% =============

% Define a command (without any arguments) that prints the Naproche logo.
\NewDocumentCommand{\Naproche}{}{\mbox{\ensuremath{\mathbb{N}}aproche}\xspace}


% Comprehension Terms
% ===================

% Define left and right projection commands "\naproche@lproj" and
% "\naproche@rproj" (with two mandatory arguments) that return the first and
% second argument, resp.
\NewDocumentCommand{\naproche@lproj}{m m}{#1}
\NewDocumentCommand{\naproche@rproj}{m m}{#2}

% Define a command "\class" (with one mandatory argument of the form
% "<arg1> | <arg2>") that prints a comprehension term with <arg1> as first and
% <arg2> as second argument, i.e. <arg1> and <arg2> are wrapped in curly
% braces and separated by a vertical bar.
%
% Example: \class{x | x \notin x}
\NewDocumentCommand{\class}{>{\SplitArgument{1}{|}} m}{
  \left\{\naproche@lproj#1~\middle\vert~\naproche@rproj#1\right\}
}


% Define a new command "\classtext" (with one mandatory argument) which
% behaves much like the "\text" command from the "amstext" package. In
% contrary to the "\text" command, "\classtext" automatically breaks its
% argument into multiple lines if its length would exceed the remaining free
% space in the current line.
% This command is useful to wrap the second argument of a "\class" command in
% in case that argument does not fit in the current line.
%
% Example: \class{z | \classtext{$z$ is a complex number such that $z$ is a
%          negative even integer or the real part of $z$ is equal to
%          $\frac{1}{2}$}}
\NewDocumentCommand{\classtext}{m}{\parbox{\linegoal}{#1}}


% Printing Labels
% ===============

% Define a new command "\printref" (with one mandaroty argument) that prints its
% argument verbatimly in a monospace font. Usefull to print labels of top-level
% sections that are defined in an imported file (and therefore not accessible
% for LaTeX).
%
% Example: "Therefore $1 + 1 = 2$ (by \printref{my_favourite_lemma})."
\NewDocumentCommand{\printref}{m}{\path{#1}}


% ForTheL Environment
% ===================

% Define a new color "naproche@forthelgray" that is used as the background color
% of "forthel" environments.
\colorlet{naproche@forthelgray}{lightgray!30}

% Define a new environment "forthel" (without any arguments) whith the following
% properties:
% - It is highlighted with a "naproche@forthelgray" background.
% - The Boolean variable "naproche@forthel" (not to be confused with the *environment*
%   "forthel" is set to "true").
% - In this envoronment, paragraphs are not indented.
% - In this envoronment, the vertical spacing between two paragraphs is set to
%   0.5 em.
\NewDocumentEnvironment{forthel}{}{
  \begin{mdframed}[backgroundcolor=naproche@forthelgray,linecolor=naproche@forthelgray]
  \setbool{naproche@forthel}{true}
  \setlength{\parindent}{0pt}
  \setlength{\parskip}{0.5em}
}{
  \end{mdframed}
  \setbool{naproche@forthel}{false}
}


% Top-level Section Environments
% ==============================

% Define a command "\naproche@SetCurrentLabelName" (with one mandatory argument)
% that  sets "\@currentlabelname" to its argument.
% See <https://ctan.net/macros/latex/contrib/hyperref/doc/nameref.pdf> for
% details about "\@currentlabelname".
\NewDocumentCommand{\naproche@SetCurrentLabelName}{m}{
  \protected@edef\@currentlabelname{#1}\@currentlabelname
}

% Define a command "\naproche@NewTLS@standard" (with two mandatory arguments
% <env> and <name>) which defines two environments "<env>" and "<env>*" (with an
% optional argument <title>) which do the following:
% 1. Only applies to the environment "<env>": The counter "naproche@tlscounter"
%    (referred to as <tls> in the following) is increased.
% 2. A new paragraph is entered and if the Boolean variable "naproche@forthel"
%    is "false" (i.e. if we are currently not in a "forthel" environment), a
%    horizontal space of 0.5 em is inserted. (Inside a "forthel" environment
%    this is not necessary since there all paragraphs are separated by 0.5 em
%    anyway.)
% 4. In case of "<env>" the text "<name> <tls>." or "<name> <tls> (<title>)."
%    (depending on whether <title> is given or not) is printed in boldface
%    and without indentation.
%    In case of "<env>*" the text "<name>." or "<name> (<title>)."
%    (depending on whether <title> is given or not) is printed in boldface
%    and without indentation.
% 5. The body of the environment is printed.
% 6. A new paragraph is entered and if the Boolean variable "naproche@forthel"
%    is "false" (i.e. if we are currently not in a "forthel" environment), a
%    horizontal space of 0.5 em is inserted. (Cf. point 2.)
%
% Example: "\naproche@NewTLS{theorem}{Theorem}" creates a new
%          'numbered' top-level section environment "theorem" (with one optional
%          argument for its title) which will be printed as "Theorem ..." and
%          a new 'unnumbered' top-level section environment "theorem*" (with an
%          optional argument for its title) which will be printed as
%          "Theorem ...".
%
%          These new environments can the be used, e.g., as:
%
%          \begin{theorem}[Cantor's Theorem]\label{cantor}
%            There is no surjection from $X$ to the powerset of $X$.
%          \end{theorem}
%
%          or
%
%          \begin{theorem*}[Hausdorff's Theorem]\label{hausdorff}
%            Every successor cardinal is regular.
%          \end{theorem*}
%
% Note: When assigning a label to a 'numbered' top-level section, it can
%       later be referenced via "\ref{...}", e.g. "\ref{cantor}".
%       When assigning a label to a 'named' top-level section, i.e. one with an
%       optional argument, it can later be referenced via "\nameref{...}", e.g.
%       "\nameref{hausdorff}", provided the "hyperref" package was loaded.
\NewDocumentCommand{\naproche@NewTLS@standard}{m m}{
  \NewDocumentEnvironment{#1}{o}{
    \refstepcounter{naproche@tlscounter}
    \par
    \ifbool{naproche@forthel}{}{\vspace{0.5em}}
    \noindent\textbf{#2~\thenaproche@tlscounter\IfValueT{##1}{~(##1)}.}%
    \IfValueT{##1}{\naproche@SetCurrentLabelName{##1}}%
  }{
    \par
    \ifbool{naproche@forthel}{}{\vspace{0.5em}}
  }
  \NewDocumentEnvironment{#1*}{o}{
    \par
    \ifbool{naproche@forthel}{}{\vspace{0.5em}}
    \noindent\textbf{#2\IfValueT{##1}{~(##1)}.}%
    \IfValueT{##1}{\naproche@SetCurrentLabelName{##1}}%
  }{
    \par
    \ifbool{naproche@forthel}{}{\vspace{0.5em}}
  }
}

% Define a command "\naproche@NewTLS@puzzle" (with one mandatory argument <env>
% and one optional argument) which defines two environments "<env>" and "<env>*"
% which just print their bodies. In case an optional argument is given, it is
% prepended to the body.
\NewDocumentCommand{\naproche@NewTLS@puzzle}{m o}{
  \NewDocumentEnvironment{#1}{}{\unskip\IfValueT{#2}{#2}}{\unskip}
  \NewDocumentEnvironment{#1*}{}{\unskip\IfValueT{#2}{#2}}{\unskip}
}

% Define top-level section environments "signature", "axiom", "definition",
% "theorem", "lemma", "proposition", "corollary" and "convention" as well as
% starred variants (e.g. "signature*"). If "naproche@puzzle" is "true", define
% them via "\naproche@NewTLS@puzzle", otherwise via "\naproche@NewTLS@standard".
\ifbool{naproche@puzzle}{
  \naproche@NewTLS@puzzle{signature}
  \naproche@NewTLS@puzzle{axiom}
  \naproche@NewTLS@puzzle{definition}
  \naproche@NewTLS@puzzle{theorem}[Therefore:]
  \naproche@NewTLS@puzzle{lemma}[Therefore:]
  \naproche@NewTLS@puzzle{proposition}[Therefore:]
  \naproche@NewTLS@puzzle{corollary}[Therefore:]
  \naproche@NewTLS@puzzle{convention}
}{
  \naproche@NewTLS@standard{signature}{Signature}
  \naproche@NewTLS@standard{definition}{Definition}
  \naproche@NewTLS@standard{axiom}{Axiom}
  \naproche@NewTLS@standard{theorem}{Theorem}
  \naproche@NewTLS@standard{lemma}{Lemma}
  \naproche@NewTLS@standard{proposition}{Proposition}
  \naproche@NewTLS@standard{corollary}{Corollary}
  \naproche@NewTLS@standard{convention}{Convention}
}


% Proof Environment
% =================

% Define an environment "proof" (with one optional argument <arg>) which prints
% the following in a new paragraph:
% 1. It prints the text "Proof." or "Proof <arg>." (if an argument is given) in
%    italics and without indentation.
% 2. It prints its body.
% 3. It prints an (unfilled) square symbol at the right margin of the last line
%    of its body.
%
% Example: \begin{proof}[by contradiction]
%            Define $R = \class{x | x \notin x}$.
%            Then $R \in R$ iff $R \notin R$.
%            Contradiction.
%          \end{proof}
\NewDocumentEnvironment{proof}{o}{
  \par
  \ifbool{naproche@forthel}{}{\vspace{0.5em}}
  \noindent\textit{Proof\IfValueT{#1}{~#1}.}%
}
{
  \hfill\ensuremath{\square}
  \par
}
