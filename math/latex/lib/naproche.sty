% This package provides basic support for typesetting Naproche formalizations
% in LaTeX. It is used by almost all example files that ship with Naproche and
% is the recommended one for custom formalizations.


% Documentation (For End-Users)
% =============================

% Features
% --------

% * Content within the `forthel` environment is marked with a grey background.
%
% * Top-level environments for `axiom`, `definition`, `theorem`,
%  `proposition`, `lemma`, `corollary`, `signature` and `proof`.
%
% * A length `ftlparskip` with which the space between paragraphs in proofs 
%   within `forthel` environments can be controlled (default: 0.5em).
%   Can be changed via `\setlength{\ftlparskip}{<new length>}`.
%
% * Alternative syntax for comprehension terms:
%   `\class{... | ...}` behaves like `\{... \mid ...\}` with additional support
%   for flexible sizes of the braces and the vertical bar.
%
% * `\classtext{...}` as an alternative for `\text{...}`. Can be used (in
%   display math mode) in the RHS of `\class{... | ...}` to achieve automatic
%   line breaks within a comprehension term.
%
% * Predefined symbols:
%   - `\dom` for the domain of a map
%   - `\fun` for lambda abstraction in low-level map definitions
%
% * `\Naproche`: The word "Naproche" with a 'blackbord N'


% Additional Options
% ------------------

% `numberswithinsection`:     Reset theorem numbers for each section.
% `numberswithinsubsection`:  Reset theorem numbers for each subsection.


% Implementation (For Developers)
% ===============================

\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{naproche}[2025/01/03 package naproche]

\IfFileExists{stex.sty}{\RequirePackage{stex}}{}
\RequirePackage{amsmath,amssymb,amsfonts}
\RequirePackage{etoolbox}
\RequirePackage{xspace}
\RequirePackage{xcolor}
\RequirePackage{hyperref}
\RequirePackage{cleveref}
\RequirePackage{xurl}
\RequirePackage{keyval}
\RequirePackage{environ}
\IfFileExists{marginnote.sty}{\RequirePackage{marginnote}}{}
\IfFileExists{mdframed.sty}{\RequirePackage{mdframed}}{}


% Bibliography
% ------------

\usepackage[backend=bibtex]{biblatex}
\usepackage{csquotes}


% Licenses
% --------

\RequirePackage{xstring}

\newcommand\printlicense[3][CcZero]{\section*{License}
  \textcopyright\,#2, #3. This work is licensed under a
  \IfStrEqCase{#1}{
    {CcZero}{\href
      {https://creativecommons.org/publicdomain/zero/1.0/}
      {Creative Commons ``CC0 1.0 Universal''}
      (CC0 1.0)
    }
    {CcBy}{\href
      {https://creativecommons.org/licenses/by/4.0/}
      {Creative Commons ``Attribution 4.0 International''}
      (CC BY 4.0)
    }
    {CcBySa}{\href
      {https://creativecommons.org/licenses/by-sa/4.0/}
      {Creative Commons ``Attribution-ShareAlike 4.0 International''}
      (CC BY-SA 4.0)
    }
    {CcByNc}{\href
      {https://creativecommons.org/licenses/by-nc/4.0/}
      {Creative Commons ``Attribution-NonCommercial 4.0 International''}
      (CC BY-NC 4.0)
    }
    {CcByNcSa}{\href
      {https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en}
      {Creative Commons ``Attribution-NonCommercial-ShareAlike 4.0 International''}
      (CC BY-NC-SA 4.0)
    }
    {CcByNd}{\href
      {https://creativecommons.org/licenses/by-nd/4.0/}
      {Creative Commons ``Attribution-NoDerivatives 4.0 International''}
      (CC BY-ND 4.0)
    }
    {CcByNcNd}{\href
      {https://creativecommons.org/licenses/by-nc-nd/4.0/}
      {Creative Commons ``Attribution-NonCommercial-NoDerivatives 4.0 International''}
      (CC BY-NC-ND 4.0)
    }
  }
  license.
}


% Links
% -----

\hypersetup{
  colorlinks=true,
  linkcolor=blue,
  urlcolor=blue
}


% Printing labels
% ---------------

\newcommand{\printref}[1]{\path{#1}}


% Top-level sections
% ------------------

\newcounter{theoremcount}

\newbool{printid}
\setbool{printid}{false} % Set to true in naproche-library.cls
\newbool{showtlsnumber}
\setbool{showtlsnumber}{true}

% Show/hide TLS numbers:
\newcommand\showtlsnumbers{\setbool{showtlsnumber}{true}}
\newcommand\hidetlsnumbers{\setbool{showtlsnumber}{false}}

\newcommand\tlstitle{}
\newcommand\tlsid{}
\newcommand\tlsidname{}
\newcommand\tlsidlabel{}

\makeatletter
\define@key{tlskeys}{forthel}[true]{\setbool{forthel}{\if\relax{#1}{false}\else#1\fi}}
\define@key{tlskeys}{title}{\def\tlstitle{#1}}
\define@key{tlskeys}{id}{\def\tlsid{#1}\def\tlsidname{\path{#1}\def\tlsidlabel{\label{#1}}}}
\makeatother

\NewEnviron{definition}[1][]{\begin{tls}[#1]{Definition}\BODY\end{tls}}
\NewEnviron{definition*}[1][]{\begin{tls*}[#1]{Definition}\BODY\end{tls*}}
\NewEnviron{signature}[1][]{\begin{tls}[#1]{Signature}\BODY\end{tls}}
\NewEnviron{signature*}[1][]{\begin{tls*}[#1]{Signature}\BODY\end{tls*}}
\NewEnviron{axiom}[1][]{\begin{tls}[#1]{Axiom}\BODY\end{tls}}
\NewEnviron{axiom*}[1][]{\begin{tls*}[#1]{Axiom}\BODY\end{tls*}}
\NewEnviron{theorem}[1][]{\begin{tls}[#1]{Theorem}\BODY\end{tls}}
\NewEnviron{theorem*}[1][]{\begin{tls*}[#1]{Theorem}\BODY\end{tls*}}
\NewEnviron{proposition}[1][]{\begin{tls}[#1]{Proposition}\BODY\end{tls}}
\NewEnviron{proposition*}[1][]{\begin{tls*}[#1]{Proposition}\BODY\end{tls*}}
\NewEnviron{lemma}[1][]{\begin{tls}[#1]{Lemma}\BODY\end{tls}}
\NewEnviron{lemma*}[1][]{\begin{tls*}[#1]{Lemma}\BODY\end{tls*}}
\NewEnviron{corollary}[1][]{\begin{tls}[#1]{Corollary}\BODY\end{tls}}
\NewEnviron{corollary*}[1][]{\begin{tls*}[#1]{Corollary}\BODY\end{tls*}}
\NewEnviron{convention}[1][]{\begin{tls}[#1]{Convention}\BODY\end{tls}}
\NewEnviron{convention*}[1][]{\begin{tls*}[#1]{Convention}\BODY\end{tls*}}

\newenvironment{tls*}[2][]{%
  \setbool{forthelBeforeEnv}{\ifbool{forthel}{true}{false}}% Save the current value of the `forthel' variable
  \setkeys{tlskeys}{#1}%
  \ifbool{forthelBeforeEnv}{}{\ifbool{forthel}{\begin{forthel}}{\par\addvspace{\baselineskip}}}%
  \if\relax\tlsid\else\tlsidlabel\fi%
  \noindent\textbf{#2\if\relax\tlstitle\else{ (\tlstitle)}\fi. }%
  \IfFileExists{marginnote.sty}{%
    \ifbool{printid}{\if\relax\tlsid\else\marginnote{\footnotesize\tlsidname}\fi}{}%
  }{}%
}{%
  \ifbool{forthelBeforeEnv}{\par}{\ifbool{forthel}{\end{forthel}}{\par\addvspace{\baselineskip}}}%
  \setbool{forthel}{\ifbool{forthelBeforeEnv}{true}{false}}% Reset the `forthel' variable
  \renewcommand\tlstitle{}%
  \renewcommand\tlsidname{}%
  \renewcommand\tlsidlabel{}%
}

\newenvironment{tls}[2][]{%
  \setbool{forthelBeforeEnv}{\ifbool{forthel}{true}{false}}% Save the current value of the `forthel' variable
  \setkeys{tlskeys}{#1}%
  \ifbool{forthelBeforeEnv}{}{\ifbool{forthel}{\begin{forthel}}{\par\addvspace{\baselineskip}}}%
  \refstepcounter{theoremcount}%
  \if\relax\tlsid\else\tlsidlabel\fi%
  \noindent\textbf{#2\ifbool{showtlsnumber}{ \thetheoremcount}{}\if\relax\tlstitle\else{ (\tlstitle)}\fi. }%
  \IfFileExists{marginnote.sty}{%
    \ifbool{printid}{\if\relax\tlsid\else\marginnote{\footnotesize\tlsidname}\fi}{}%
  }{}%
}{%
  \ifbool{forthelBeforeEnv}{\par}{\ifbool{forthel}{\end{forthel}}{\par\addvspace{\baselineskip}}}%
  \setbool{forthel}{\ifbool{forthelBeforeEnv}{true}{false}}% Reset the `forthel' variable
  \renewcommand\tlstitle{}%
  \renewcommand\tlsidname{}%
  \renewcommand\tlsidlabel{}%
}

\newcommand\proofmethod{}

\makeatletter
\define@key{proofkeys}{forthel}[true]{\setbool{forthel}{\if\relax{#1}{false}\else#1\fi}}
\define@key{proofkeys}{method}{\def\proofmethod{#1}}
\makeatother

\newcounter{proofdepth}

\newenvironment{proof}[1][]{%
  \setbool{forthelBeforeEnv}{\ifbool{forthel}{true}{false}}% Save the current value of the `forthel' variable
  \setkeys{proofkeys}{#1}%
  \ifbool{forthelBeforeEnv}{\par}{\ifbool{forthel}{\begin{forthel}}{\par\addvspace{\baselineskip}}}%
  \noindent\textit{Proof\if\relax\proofmethod\else\ by \proofmethod\fi. }%
  \relax%
  % Reset the proof method so that it is not reused by subproofs:
  \def\proofmethod{}%
  \stepcounter{proofdepth}%
}
{%
  \ifnum\value{proofdepth}>1\ensuremath\square\else\strut\hfill\ensuremath\blacksquare\fi%
  \ifbool{forthelBeforeEnv}{}{\ifbool{forthel}{\end{forthel}}{\par\addvspace{\baselineskip}}}%
  \setbool{forthel}{\ifbool{forthelBeforeEnv}{true}{false}}% Reset the `forthel' variable
  % Reset the proof method so that it is not reused by following proofs:
  \def\proofmethod{}%
  \addtocounter{proofdepth}{-1}%
}

\makeatletter
% to prevent \list from being redefined, e.g. by a \symdef:
\let\@latexlist\list
\let\@endlatexlist\endlist
\newenvironment{case}[1]{%
  \@latexlist{}{
    \setlength\leftmargin{1em}
    \setlength\topsep{0cm}
  }
  \item\textit{Case #1}%
}
{%
  \ensuremath\square%
  \@endlatexlist
}
\makeatother


% ForTheL Environment
% -------------------

\colorlet{forthelgray}{lightgray!30}

% Space between paragraphs in forthel environments
\newlength{\ftlparskip}
\setlength{\ftlparskip}{0.5em}

\newbool{forthel}
\setbool{forthel}{false}

\newbool{forthelBeforeEnv}
\newbool{forthelInEnv}

% ForTheL environment
\newenvironment{forthel}{%
  \par\addvspace{\baselineskip}
  \IfFileExists{stex.sty}{%
  \ifstexhtml
    \begin{stex_annotate_env}{style:class=forthel,rustex:block=true,rustex:sized=-20}
  \else
    \IfFileExists{mdframed.sty}{%
      \begin{mdframed}[backgroundcolor=forthelgray,linecolor=forthelgray]%
    }{%
      \PackageWarning{naproche}{%
        Package mdframed not installed,\MessageBreak
        therefore using verbatim fallback for\MessageBreak
        forthel environment%
      }%
      \noindent\texttt{\char`\\begin\char`\{forthel\char`\}}\\%
    }%
  \fi
  }{%
    \IfFileExists{mdframed.sty}{%
      \begin{mdframed}[backgroundcolor=forthelgray,linecolor=forthelgray]%
    }{%
      \PackageWarning{naproche}{%
        Package mdframed not installed,\MessageBreak
        therefore using verbatim fallback for\MessageBreak
        forthel environment%
      }%
      \noindent\texttt{\char`\\begin\char`\{forthel\char`\}}\\%
    }
  }%
  \rmfamily%
  \setbool{forthel}{true}%
  \setlength{\parindent}{0pt}%
  \setlength{\parskip}{\ftlparskip}%
}{%
  \IfFileExists{stex.sty}{%
    \ifstexhtml
      \end{stex_annotate_env}%
    \else
      \IfFileExists{mdframed.sty}{%
        \end{mdframed}
      }{%
        \\\noindent\texttt{\char`\\end\char`\{forthel\char`\}}\\[\parskip]%
      }
    \fi
    }{%
    \IfFileExists{mdframed.sty}{%
      \end{mdframed}
    }{%
      \\\noindent\texttt{\char`\\end\char`\{forthel\char`\}}\\[\parskip]%
    }
  }
  \rmfamily%
  \setbool{forthel}{false}%
  \par\addvspace{\baselineskip}
}

% Wrapper for ForTheL environments. Warning: In the PDF/HTML it looks exactly
% like an ordinary ForTheL environment, but its content is not checked by
% Naproche. So use it wisely!
\newenvironment{greybox}{
  \IfFileExists{stex.sty}{
    \ifstexhtml
        \begin{stex_annotate_env}{style:class=forthel,rustex:block=true,rustex:sized=-20}
      \else
        \IfFileExists{mdframed.sty}{%
          \begin{mdframed}[backgroundcolor=forthelgray,linecolor=forthelgray]
        }{%
          \PackageWarning{naproche}{%
            Package mdframed not installed,\MessageBreak
            therefore using verbatim fallback for\MessageBreak
            forthel environment%
          }%
          \noindent\texttt{\char`\\begin\char`\{forthel\char`\}}\\%
        }
      \fi
  }{%
    \IfFileExists{mdframed.sty}{%
      \begin{mdframed}[backgroundcolor=forthelgray,linecolor=forthelgray]%
    }{%
      \PackageWarning{naproche}{%
        Package mdframed not installed,\MessageBreak
        therefore using verbatim fallback for\MessageBreak
        forthel environment%
      }%
      \noindent\texttt{\char`\\begin\char`\{forthel\char`\}}\\%
    }%
  }%
  \setlength{\parindent}{0pt}
}{
  \IfFileExists{stex.sty}{%
    \ifstexhtml
      \end{stex_annotate_env}%
    \else
      \IfFileExists{mdframed.sty}{%
        \end{mdframed}
      }{%
        \\\noindent\texttt{\char`\\end\char`\{forthel\char`\}}\\[\parskip]%
      }
    \fi
  }{%
    \IfFileExists{mdframed.sty}{%
      \end{mdframed}
    }{%
      \\\noindent\texttt{\char`\\end\char`\{forthel\char`\}}\\[\parskip]%
    }
  }
}


% Inline ForTheL Command
% ----------------------

\IfFileExists{tcolorbox.sty}{
  \RequirePackage{tcolorbox}
}{}

\IfFileExists{soulpos.sty}{
  \RequirePackage{soulpos}
}{}

\IfFileExists{tcolorbox.sty}{
  %\AtBeginDocument{
    \newtcbox\ftlbox{
      on line,
      arc=0pt,
      outer arc=0pt,
      colback=forthelgray,
      colframe=forthelgray,
      boxsep=0pt,
      left=.2em,
      right=.2em,
      top=.2em,
      bottom=.4em,
      boxrule=0pt,
      height=1.4em    
    }
  %}
}{}

\IfFileExists{tcolorbox.sty}{
  \IfFileExists{soulpos.sty}{
    \ulposdef\inlineforthelbox[xoffset-start=.2em]{%
      \ftlbox{\rule\ulwidth{0pt}}%
    }
  }{}
}{}

\newcommand\inlineforthel[1]{%
  \setbool{forthel}{true}%
  \IfFileExists{tcolorbox.sty}{\IfFileExists{soulpos.sty}{%
    \inlineforthelbox{#1}}{}%
  }{%
  \PackageWarning{naproche}{%
    Package tcolorbox or soulpos not installed,\MessageBreak
    therefore using verbatim fallback for\MessageBreak
    \protect\inlineforthel\space command%
  }%
    \texttt{\char`\\inlineforthel\char`\{}#1\texttt{\char`\}}%
  }%
  \setbool{forthel}{false}%
}


% Comprehension terms
% -------------------

\IfFileExists{linegoal.sty}{
  \RequirePackage{linegoal}
}{}

% Gets the left-hanqd and right-hand side, resp., of an expression of the form
% "foo|bar"
\def\getfirst#1|#2\relax{#1}
\def\getsecond#1|#2\relax{#2}

% Comprehension term: "\class{... | ...}".
% Naproche allows to enclose the RHS within "\text{...}", e.g.
% "\class{x | \text{$x$ is greater than $y$}}".
% Use "\classtext{...}" instead of "\text{...}" to enable automatic line breaks
% in the RHS.
\newcommand{\class}[1]{%
  \left\{%
  \getfirst#1\relax%
  ~\middle\vert~%
  \linebreak[1]%
  \getsecond#1\relax%
  \right\}%
}

\newcommand{\classtext}[1]{%
  \IfFileExists{linegoal.sty}{%
    \parbox{\linegoal}{#1}%
  }{%
    \PackageWarning{naproche}{%
      Package linegoal not installed, therefore\MessageBreak
      using verbatim fallback for \protect\classtext\space\MessageBreak
      command%
    }%
    \texttt{\char`\\classtext\char`\{}#1\texttt{\char`\}}%
  }%
}


% Predefined symbols
% ------------------

\newcommand{\dom}{\operatorname{dom}}
\newcommand{\fun}{\mathrm{\lambda}}


% Naproche logo
% -------------

\newcommand{\Naproche}{\mbox{\ensuremath{\mathbb{N}}aproche}\xspace}


% Options
% -------

\DeclareOption{numberswithinsection}{%
    \counterwithin{theoremcount}{section}
}
\DeclareOption{numberswithinsubsection}{%
    \counterwithin{theoremcount}{subsection}
}
\DeclareOption{puzzle}{%
  \let\signature\relax
  \let\endsignature\relax
  \let\axiom\relax
  \let\endaxiom\relax
  \let\definition\relax
  \let\enddefinition\relax
  \let\theorem\relax
  \let\endtheorem\relax
  \newenvironment{signature}{\unskip}{\unskip}
  \newenvironment{axiom}{\unskip}{\unskip}
  \newenvironment{definition}{\unskip}{\unskip}
  \newenvironment{theorem}{\unskip Therefore:}{}

  \renewenvironment{forthel}{
    \IfFileExists{stex.sty}{
      \ifstexhtml
        \begin{stex_annotate_env}{style:class=forthel,rustex:block=true,rustex:sized=-20}
      \else
        \IfFileExists{mdframed.sty}{%
          \begin{mdframed}[backgroundcolor=forthelgray,linecolor=forthelgray]
        }{%
          \PackageWarning{naproche}{%
            Package mdframed not installed,\MessageBreak
            therefore using verbatim fallback for\MessageBreak
            forthel environment%
          }%
          \noindent\texttt{\char`\\begin\char`\{forthel\char`\}}\\%
        }
      \fi
    }{%
      \IfFileExists{mdframed.sty}{%
        \begin{mdframed}[backgroundcolor=forthelgray,linecolor=forthelgray]
      }{%
        \PackageWarning{naproche}{%
          Package mdframed not installed,\MessageBreak
          therefore using verbatim fallback for\MessageBreak
          forthel environment%
        }%
        \noindent\texttt{\char`\\begin\char`\{forthel\char`\}}\\%
      }
    }
    \setlength{\parindent}{0pt}
  }{
    \IfFileExists{stex.sty}{%
      \ifstexhtml
        \end{stex_annotate_env}%
      \else
        \IfFileExists{mdframed.sty}{%
          \end{mdframed}
        }{%
          \\\noindent\texttt{\char`\\end\char`\{forthel\char`\}}\\[\parskip]%
        }
      \fi
    }{%
      \IfFileExists{mdframed.sty}{%
        \end{mdframed}
      }{%
        \\\noindent\texttt{\char`\\end\char`\{forthel\char`\}}\\[\parskip]%
      }
    }
  }
}
\DeclareOption*{\PackageWarning{naproche}{Unknown ‘\CurrentOption’}}
\ProcessOptions\relax
